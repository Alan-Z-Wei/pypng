#!/usr/bin/env python

"""
pipcolours - extract all colours present in source image.
Produces a PNG that has each colour exactly once.

Also performs grey and alpha reduction when possible:
if all colour pixels are grey, output PNG is grey;
if all pixels are opaque, output PNG has no alpha channel.
"""

import argparse
import itertools
import sys

import png


def colours(out, inp):
    r = png.Reader(file=inp)
    _,_,rows,info = r.asDirect()
    planes = info['planes']
    bitdepth = info['bitdepth']

    col = set()
    for row in rows:
        col = col.union(png.group(row, planes))

    col, planes = channel_reduce(col, planes, bitdepth)

    col = sorted(col)
    col = list(itertools.chain(*col))
    width = len(col) // planes
    greyscale = planes in (1,2)
    alpha = planes in (2,4)
    w = png.Writer(width, 1,
        bitdepth=bitdepth, greyscale=greyscale, alpha=alpha)
    w.write(out, [col])


def channel_reduce(col, planes, bitdepth):
    """Attempt to reduce the number of channels in the set of colours."""
    col, planes = reduce_grey(col, planes)
    col, planes = reduce_alpha(col, planes, bitdepth)
    return col, planes


def reduce_grey(col, planes):
    """
    Reduce a colour image to grey if
    all intensities match in all pixels.
    """
    if planes >= 3:
        def isgrey(c):
            return c[0] == c[1] == c[2]
        if all(isgrey(c) for c in col):
            # Every colour is grey, convert to 1- or 2-tuples.
            col = set(x[0::3] for x in col)
            planes -= 2
    return col, planes


def reduce_alpha(col, planes, bitdepth):
    """
    Remove alpha channel if all pixels are fully opaque.
    """
    maxval = 2 ** bitdepth - 1
    if planes in (2, 4):
        def isopaque(c):
            return c[-1] == maxval
        if all(isopaque(c) for c in col):
            # Every pixel is opaque, remove alpha channel.
            col = set(x[:-1] for x in col)
            planes -= 1
    return col, planes


def main(argv=None):
    if argv is None:
        argv = sys.argv

    argv = argv[1:]
    parser = argparse.ArgumentParser()
    version = "%(prog)s " + png.__version__
    parser.add_argument("--version", action="version", version=version)
    parser.add_argument("input", default="-", metavar="PNG")

    args = parser.parse_args(argv)
    input = png.cli_open(args.input)

    return colours(png.binary_stdout(), input)


if __name__ == '__main__':
    main()
