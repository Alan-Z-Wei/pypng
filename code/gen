#!/usr/bin/env python
# gen

from __future__ import print_function

# Generate a PNG test image on stdout.

from array import array
from fractions import Fraction

import argparse
import re
import sys

import png

# Below is a big stack of test image generators.


def test_gradient_horizontal_lr(x, y):
    return x


def test_gradient_horizontal_rl(x, y):
    return 1 - x


def test_gradient_vertical_tb(x, y):
    return y


def test_gradient_vertical_bt(x, y):
    return 1 - y


def test_radial_tl(x, y):
    return max(1 - (x * x + y * y)**0.5, 0.0)


def test_radial_center(x, y):
    return test_radial_tl(x - 0.5, y - 0.5)


def test_radial_tr(x, y):
    return test_radial_tl(1 - x, y)


def test_radial_bl(x, y):
    return test_radial_tl(x, 1 - y)


def test_radial_br(x, y):
    return test_radial_tl(1 - x, 1 - y)


def test_stripe(x, n):
    return int(x * n) & 1


def test_stripe_h_2(x, y):
    return test_stripe(x, 2)


def test_stripe_h_4(x, y):
    return test_stripe(x, 4)


def test_stripe_h_10(x, y):
    return test_stripe(x, 10)


def test_stripe_v_2(x, y):
    return test_stripe(y, 2)


def test_stripe_v_4(x, y):
    return test_stripe(y, 4)


def test_stripe_v_10(x, y):
    return test_stripe(y, 10)


def test_stripe_lr_10(x, y):
    return test_stripe(x + y, 10)


def test_stripe_rl_10(x, y):
    return test_stripe(1 + x - y, 10)


def test_checker(x, y, n):
    return test_stripe(x, n) ^ test_stripe(y, n)


def test_checker_8(x, y):
    return test_checker(x, y, 8)


def test_checker_15(x, y):
    return test_checker(x, y, 15)


def test_zero(x, y):
    return 0


def test_one(x, y):
    return 1


PATTERN = {
    "GLR": test_gradient_horizontal_lr,
    "GRL": test_gradient_horizontal_rl,
    "GTB": test_gradient_vertical_tb,
    "GBT": test_gradient_vertical_bt,
    "RTL": test_radial_tl,
    "RTR": test_radial_tr,
    "RBL": test_radial_bl,
    "RBR": test_radial_br,
    "RCTR": test_radial_center,
    "HS2": test_stripe_h_2,
    "HS4": test_stripe_h_4,
    "HS10": test_stripe_h_10,
    "VS2": test_stripe_v_2,
    "VS4": test_stripe_v_4,
    "VS10": test_stripe_v_10,
    "LRS": test_stripe_lr_10,
    "RLS": test_stripe_rl_10,
    "CK8": test_checker_8,
    "CK15": test_checker_15,
    "ZERO": test_zero,
    "ONE": test_one,
}


def generate_image(size, bitdepth, pattern):
    """
    Create a single plane (monochrome) test pattern.
    Returns a flat row flat pixel array.
    """

    width, height = size

    maxval = 2 ** bitdepth - 1
    if maxval > 255:
        a = array("H")
    else:
        a = array("B")
    fw = float(width)
    fh = float(height)
    pfun = PATTERN[pattern]

    # We add (0.5, 0.5) to each coordinate, effectively sampling
    # each pixel at its centre.
    # This is morally better, and produces all 256 sample values
    # in a 256-pixel wide gradient.
    for y in range(height):
        fy = Fraction(Fraction(y+0.5), height)
        for x in range(width):
            fx = Fraction(Fraction(x+0.5), width)
            a.append(int(round(maxval * pfun(fx, fy))))
    return a


def generate(args):
    """
    Create a PNG test image and write the file to stdout.

    `args` should be an argparse Namespace instance or similar.
    """

    size = args.size
    args.bitdepth = args.depth

    pattern = args.pattern[0]

    pixels = generate_image(size, args.bitdepth, pattern)

    writer = png.Writer(
        size[0], size[1], bitdepth=args.bitdepth, greyscale=True, alpha=False
    )
    writer.write_array(sys.stdout, pixels)


def dimensions(s):
    """
    Typecheck the --size option, which should be
    one or two comma separated numbers.
    Example: "64,40".
    """

    tupl = re.findall(r"\d+", s)
    if len(tupl) not in (1, 2):
        raise ValueError("%r should be one or two whole numbers, separated by comma")
    if len(tupl) == 1:
        tupl *= 2
    assert len(tupl) == 2
    return list(map(int, tupl))


def main(argv=None):
    if argv is None:
        argv = sys.argv
    parser = argparse.ArgumentParser(description="Generate greyscale PNG patterns")

    parser.add_argument(
        "-l", "--list", action="store_true", help="print list of patterns and exit"
    )
    parser.add_argument(
        "-d", "--depth", default=8, type=int, metavar="N", help="N bits per pixel"
    )
    parser.add_argument(
        "-s",
        "--size",
        default=[256, 256],
        type=dimensions,
        metavar="w[,h]",
        help="width and height of the image in pixels",
    )
    parser.add_argument("pattern", nargs="*", help="name of pattern")

    args = parser.parse_args(argv[1:])

    if args.list:
        for name in sorted(PATTERN):
            print(name)
        return

    if not args.pattern:
        parser.error("--list or pattern is required")
    return generate(args)


if __name__ == "__main__":
    main()
